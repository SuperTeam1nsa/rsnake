searchState.loadedDescShard("rsnaker", 0, "Snake Game using Ratatui\nGame Control Modules\nGame logic Modules\nGame graphical Modules\nPanics\nDirection Enum\nSpeed Enum with Static Configuration\nRepresents possible movement directions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCheck input on greeting screen Return Some(GreetingOption) …\nCalls <code>U::from(self)</code>.\nYou cannot block middle-click paste/scroll behavior from …\nRepresents speed levels with embedded properties\nContains all configuration data for a speed level\nReturns the configuration for this speed level\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the speed value in milliseconds\nDelay in milliseconds between moves\nReturns the name of the speed level\nHuman-readable name of the speed level\nReturns the score modifier for this speed level\nScore multiplier for this speed level\nReturns the symbol representing this speed level\nSymbol representing this speed level\nFruits Manager\nGame State Management\nManages fruit objects within the game logic. Map outlive …\nReturns a list of fruits at the given position, copying …\nReturns the argument unchanged.\nGenerates a random valid position for spawning fruits.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FruitsManager</code> with a given number of fruits.\nReplaces eaten fruits with new random ones and ensures …\nSpawns a fruit at a random position on the map.\nStructure holding all the configuration parameters for the …\nInitial position of the snake’s head at the start of the …\nSnake trail symbol (emoji or character)\nClassic game with only growing snake\nReturns the argument unchanged.\nGets the current speed setting\nSnake symbol (emoji or character) Defines short value …\nReturns the initial snake position\nCalls <code>U::from(self)</code>.\nNumber of lives\nLoad game parameters\nLoad parameters from a TOML file\nNumber of fruits in the game\nSave game parameters\nSave the current parameters to a TOML file\nInitial length of the snake\nSpeed of the snake (Slow, Normal, Fast, Tremendous) …\nCaps to 60 FPS or not\nControl part of the main menu allows to switch to sub menu …\nPanics\nOur game engine NB: ’c must outlive ’b as, ’c …\nThe game logic map where items/snake are displayed NB: As …\nThe direction chosen by the player for the snake\nReturns the argument unchanged.\nManage fruits (popping, eaten etc.)\nCalls <code>U::from(self)</code>.\nDisplays the game menu and handles user navigation\nGame main parameters\nRepresents the snake moving around\nThe game logic speed, linked to the snake movements\nStart the main Game threads: input, rendering, logic\nGame states and metrics (life etc.)\nThe current terminal\nManages the game state, including life count, score, and …\nRepresents the possible states of the game.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GameState</code> with the specified initial life …\nResets the game state to its initial values.\nThis module provides various menu and UI components for …\nThis module contains the core components of the game …\nA struct representing a graphical block that can be …\nA struct representing the position of a graphical block in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the current position of the graphic block.\nRetrieves the current position of the graphic block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GraphicBlock</code> with the specified position, …\nRenders the graphic block into the given buffer, using the …\nRenders the graphic block into the given buffer.\nSets the position of the graphic block.\nDisplay the fruit menu, vertically centered\nPrint the welcome screen, reminding controls Show Fruit …\nDisplay the parameters menu center aligned, vertically …\nDisplay the speed menu center aligned, vertically centered\nCreates a vertically centered rectangle within the given …\nRender a horizontally and vertically centered paragraph …\nTODO finish it to have a graphical option setup alongside …\nA menu with multiple choice options and a save button\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a list of all selected values\nHandle user input from the menu\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the save button is selected\nMove to the next option or save button\nMove to the previous option or save button\nRuns a multiple-choice menu in the terminal\nToggle the currently selected option\nTODO finish it to have a graphical option setup alongside …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPosition to render elements will be clamped to the frame …\nReturn whether stop the rendering\nPanics\nFruit Management Module\nDistribution statistics with weighted lottery / pie chart …\nRepresents a fruit on the map. Fruits have a score value …\nReturns the argument unchanged.\nReturns the score of the fruit.\nCalls <code>U::from(self)</code>.\nChecks if the fruit is at a specific position.\nCreates a new <code>Fruit</code> at a given position with an associated …\nChecks if the fruit is at a specific position.\nA struct representing the game logic map. The map is …\nReturns the current viewport (the visible area) of the map.\nReturns the argument unchanged.\nReturns the size of each case (cell) on the map.\nReturns the <code>Block</code> widget representing the map’s border …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Map</code> instance with a given case size and …\nDetermines if a given position is outside the bounds of …\nReverses the position if it is outside the bounds of the …\nTo resize the map viewport, not for in game logic use # …\nA struct representing the snake’s body in the game. It …\nA backup plan in case the widget reference is unstable, by …\nMoves the snake’s head down by one case/line and updates …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the snake’s head overlaps with any part of its …\nMoves the snake’s head left by one case and updates the …\nCreates a new <code>SnakeBody</code> instance with the specified body …\nMoves the snake in the specified direction and checks if …\nUpdates the positions of the body segments to simulate the …\nChange the snake size by adding/removing a specified …\nResets the snake’s body to its initial position and size.\nMoves the snake’s head right by one case and updates the …\nMoves the snake’s head up by one case/line and updates …")