searchState.loadedDescShard("rsnake", 0, "Snake Game using Ratatui\nGame Modules\nThis module contains the core components of the game. It …\nDirection Enum\nFruits Manager\nGame State Management\nSpeed Struct and Velocity Enum\nRepresents possible movement directions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nManages fruit objects within the game.\nEnsures that malus (negative score) fruits do not dominate.\nReturns a list of fruits at the given position, copying …\nReturns the argument unchanged.\nGenerates a random valid position for spawning fruits.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FruitsManager</code> with a given number of fruits.\nReplaces eaten fruits with new random ones and ensures …\nSpawns a fruit at a random position on the map.\nManages the game state, including life count, score, and …\nRepresents the possible states of the game.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GameState</code> with the specified initial life …\nResets the game state to its initial values.\nRepresents a speed entry with a name and a value.\nRepresents possible velocity levels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the speed value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Speed</code> instance based on the given <code>Velocity</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFruit Management Module\nDistribution statistics with weighted lottery / pie chart …\nRepresents a fruit on the map. Fruits have a score value …\nReturns the argument unchanged.\nReturns the score of the fruit.\nCalls <code>U::from(self)</code>.\nChecks if the fruit is at a specific position.\nCreates a new <code>Fruit</code> at a given position with an associated …\nA struct representing a graphical block that can be …\nA struct representing the position of a graphical block in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the current position of the graphic block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GraphicBlock</code> with the specified position, …\nRenders the graphic block into the given buffer, using the …\nRenders the graphic block into the given buffer.\nSets the position of the graphic block.\nA struct representing the game map. The map is resizable …\nReturns the current viewport (the visible area) of the map.\nReturns the argument unchanged.\nReturns the size of each case (cell) on the map.\nReturns the <code>Block</code> widget representing the map’s border …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Map</code> instance with a given case size and …\nDetermines if a given position is outside the bounds of …\nReverses the position if it is outside the bounds of the …\nA struct representing the snake’s body in the game. It …\nA backup plan in case the widget reference is unstable, by …\nMoves the snake’s head down by one case and updates the …\nReturns the argument unchanged.\nChecks if the snake’s head overlaps with any part of its …\nCalls <code>U::from(self)</code>.\nMoves the snake’s head left by one case and updates the …\nCreates a new <code>SnakeBody</code> instance with the specified body …\nMoves the snake in the specified direction and checks if …\nUpdates the positions of the body segments to simulate the …\nChange the snake size by adding/removing a specified …\nResets the snake’s body to its initial position and size.\nMoves the snake’s head right by one case and updates the …\nMoves the snake’s head up by one case and updates the …\nCreates a centered paragraph with text and color style")